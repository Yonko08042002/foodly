stages:
  - check
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: /certs
  NODE_VERSION: 20
  FF_NETWORK_PER_BUILD: "true"
  DOCKER_DNS: "8.8.8.8"

# Cache modules between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store
    - node_modules/
    - .next/cache

# Define common setup for Node.js jobs
.node_setup: &node_setup
  image: node:${NODE_VERSION}-alpine  # Using alpine for smaller image size
  services:
    - name: docker:dind
      command: ["--dns=8.8.8.8", "--dns=8.8.4.4"]
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  before_script:
    - npm install -g pnpm@9
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile  # Ensures exact versions are installed
  only:
    - merge_requests
  tags:
    - fresher-uit-team2

# Stage 1: Parallel checks
gitleaks:
  stage: check
  image: alpine:latest  # Using Alpine as base image
  before_script:
    - apk add --no-cache git wget tar
    - wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
    - tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
    - mv gitleaks /usr/local/bin/
  script:
    - |
      cat > .gitleaks.toml <<EOF
      [allowlist]
      files = [
        "*.md",
        "*.txt",
        "*.yml",
        "*.yaml",
        "*.json"
      ]
      EOF
    - gitleaks detect --source=. --config=.gitleaks.toml
  only:
    - merge_requests
  allow_failure: true
  tags:
    - fresher-uit-team2

lint:
  stage: check
  <<: *node_setup
  script:
    - pnpm lint
  only:
    - merge_requests
  tags:
    - fresher-uit-team2

# Stage 2: Build Check
build_check:
  stage: build
  <<: *node_setup
  script:
    - pnpm build
  only:
    - merge_requests
  tags:
    - fresher-uit-team2

# Stage 3: Auto Deploy (only for develop branch)
deploy:
  stage: deploy
  before_script:
    - export DOCKER_HOST=unix:///var/run/docker.sock
    - docker info
  script:
    - docker compose up -d --build --force-recreate  # Force recreate for clean deployment
    # Clean up old images and system resources
    - docker image prune -f --filter "until=24h"  # Remove images older than 24h
    - docker system prune -f
  only:
    - develop
  tags:
    - training-deploy
